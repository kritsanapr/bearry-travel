import { Elysia, t } from 'elysia';
import { lineClient } from '../config/line.config';
import {
  createResponse,
  createErrorResponse,
  formatAgenda,
} from '../utils/response';
import { getJPYToTHBRate } from '../services/exchange.service';
import { findNearbyRestaurants } from '../services/places.service';
import {
  getGeminiResponse,
  getGeminiVisionResponse,
  getOpenAIResponse,
  getOpenAIVisionResponse,
} from '../services/ai.service';
import { AGENDA } from '../constants';

// LINE Webhook Interfaces
import {
  LineWebhookBody,
  LineEvent,
  LineMessage,
} from '../types/line-event.interface';
import axios from 'axios';

// Message Handlers
async function handleExchangeRate(event: LineEvent) {
  try {
    const text = event.message?.text || '';
    const match = text.match(/(\d+)\s*(ÂÜÜ|¬•|JPY|‡πÄ‡∏¢‡∏ô)/i);

    if (!match) {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á ‡πÄ‡∏ä‡πà‡∏ô "1000ÂÜÜ" ‡∏´‡∏£‡∏∑‡∏≠ "1000 JPY ‡∏´‡∏£‡∏∑‡∏≠ "1000 ‡πÄ‡∏¢‡∏ô""',
      });
      return;
    }

    const amount = parseInt(match[1]);
    const rate = await getJPYToTHBRate();
    const thbAmount = (amount * rate.rate).toFixed(2);

    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: `${amount} ‡πÄ‡∏¢‡∏ô = ${thbAmount} ‡∏ö‡∏≤‡∏ó\n(‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: 1 ‡πÄ‡∏¢‡∏ô = ${rate.rate.toFixed(4)} ‡∏ö‡∏≤‡∏ó)\n‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date(rate.timestamp).toLocaleString('th-TH')}`,
    });
  } catch (error) {
    console.error('Exchange rate error:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
    });
  }
}

async function handleRestaurantSearch(event: LineEvent) {
  try {
    const location = event.message?.location;
    if (!location) {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á',
      });
      return;
    }

    const restaurants = await findNearbyRestaurants(
      location.latitude,
      location.longitude
    );
    const restaurantList = restaurants
      .map(
        (r, i) =>
          `${i + 1}. ${r.name}\nüìç ${r.address}\n‚≠ê ${r.rating}\nüìè ${r.distance}`
      )
      .join('\n\n');

    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: `‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á:\n\n${restaurantList}`,
    });
  } catch (error) {
    console.error('Restaurant search error:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
    });
  }
}

async function loading(userId: string) {
  return axios({
    method: 'post',
    url: 'https://api.line.me/v2/bot/chat/loading/start',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${process.env.CHANNEL_ACCESS_TOKEN}`,
    },
    data: { chatId: userId, loadingSeconds: 10 },
  });
}

async function handleAIQuery(event: LineEvent) {
  try {
    const text = event.message?.text || '';
    let response: string;

    // Check if message contains "openai" to use OpenAI, otherwise use Gemini
    const useOpenAI = text.toLowerCase().includes('openai');
    const cleanPrompt = text.replace(/(openai|gemini)/gi, '').trim();

    if (useOpenAI) {
      response = await getOpenAIResponse(cleanPrompt);
    } else {
      response = await getGeminiResponse(cleanPrompt);
    }

    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: response,
    });
  } catch (error) {
    console.error('AI query error:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
    });
  }
}

async function handleImageAnalysis(event: LineEvent) {
  try {
    if (!event.message?.image) {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
      });
      return;
    }

    // Get image content from Line
    const content = await lineClient.getMessageContent(event.message.id);
    const chunks: Uint8Array[] = [];

    for await (const chunk of content) {
      chunks.push(new Uint8Array(chunk));
    }

    const imageBuffer = Buffer.concat(chunks);
    const base64Image = imageBuffer.toString('base64');

    // Create a temporary URL for the image (you might want to implement proper image storage)
    const imageUrl = `data:image/jpeg;base64,${base64Image}`;

    const text = event.message?.text || 'What is in this image?';
    const useOpenAI = text.toLowerCase().includes('openai');
    const cleanPrompt = text.replace(/(openai|gemini)/gi, '').trim();

    let response: string;
    if (useOpenAI) {
      response = await getOpenAIVisionResponse(imageUrl, cleanPrompt);
    } else {
      response = await getGeminiVisionResponse(imageUrl, cleanPrompt);
    }

    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: response,
    });
  } catch (error) {
    console.error('Image analysis error:', error);
    await lineClient.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
    });
  }
}

export const webhook = new Elysia().post(
  '/webhook',
  async ({ body }: { body: LineWebhookBody }) => {
    try {
      console.log('Received webhook body:', body.events);

      const events = body.events;
      const userId = body.events[0].source.userId;

      if (!events || !Array.isArray(events)) {
        console.error('Invalid events format:', events);
        return createErrorResponse('Invalid events format', 400);
      }

      for (const event of events) {
        await loading(userId);
        if (event.type === 'message') {
          if (event.message?.type === 'text') {
            const text = event.message?.text?.toLowerCase() ?? '';

            if (text.match(/(ÂÜÜ|¬•|jpy|‡πÄ‡∏¢‡∏ô)/i)) {
              await handleExchangeRate(event);
            } else if (
              text.includes('‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£') ||
              text.includes('restaurant')
            ) {
              await lineClient.replyMessage(event.replyToken, {
                type: 'text',
                text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á',
              });
            } else if (text.includes('‡πÅ‡∏û‡∏•‡∏ô') || text.includes('plan')) {
              // Handle planning
              const tripAgenda = AGENDA['Tokyo Trip 2025'];
              await lineClient.replyMessage(event.replyToken, {
                type: 'text',
                text: formatAgenda(tripAgenda),
              });
            } else if (
              text.includes('‡πÅ‡∏û‡∏•‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà') ||
              text.includes('‡πÅ‡∏û‡∏•‡∏ô‡∏ß‡∏±‡∏ô')
            ) {
              const tripAgenda = AGENDA['Tokyo Trip 2025'];
              await lineClient.replyMessage(event.replyToken, {
                type: 'text',
                text: formatAgenda(tripAgenda),
              });
            } else {
              await handleAIQuery(event);
            }
          } else if (event.message?.type === 'image') {
            await handleImageAnalysis(event);
          } else if (event.message?.type === 'location') {
            await handleRestaurantSearch(event);
          } else if (
            event.type === 'message' &&
            event.message?.type === 'sticker'
          ) {
            await lineClient.replyMessage(event.replyToken, {
              type: 'text',
              text: `‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå: ${event.message.stickerId}`,
            });
          }
        } else if (event.type === 'follow') {
          await lineClient.replyMessage(event.replyToken, {
            type: 'text',
            text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Japan Travel Assistant\n\n‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n1. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏¢‡∏ô (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ ÂÜÜ ‡∏´‡∏£‡∏∑‡∏≠ JPY)\n2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)\n3. ‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô (‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)\n4. ‡πÉ‡∏ä‡πâ Gemini AI (‡∏û‡∏¥‡∏°‡∏û‡πå gemini ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°)',
          });
        } else if (event.type === 'unfollow') {
          console.log('Unfollow event detected');
        } else if (event.type === 'postback') {
          await lineClient.replyMessage(event.replyToken, {
            type: 'text',
            text: `Postback Data: ${event.postback.data}`,
          });
        } else if (event.type === 'join') {
          await lineClient.replyMessage(event.replyToken, {
            type: 'text',
            text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°',
          });
        } else if (event.type === 'leave') {
          console.log('Bot was removed from a group');
        } else {
          console.log(`Unknown event type: ${event.type}`);
        }
      }

      return createResponse({ timestamp: new Date().toISOString() });
    } catch (error) {
      console.error('Webhook error:', error);
      return createErrorResponse(
        error instanceof Error ? error.message : 'Unknown error',
        500
      );
    }
  },
  {
    detail: {
      tags: ['Webhook'],
      description: 'LINE Bot Webhook endpoint',
      responses: {
        200: {
          description: 'Successful webhook response',
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  success: { type: 'boolean' },
                  message: { type: 'string' },
                  data: { type: 'object' },
                },
                required: ['success', 'message', 'data'],
              },
            },
          },
        },
        400: {
          description: 'Bad request',
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  success: { type: 'boolean' },
                  message: { type: 'string' },
                  code: { type: 'number' },
                },
                required: ['success', 'message', 'code'],
              },
            },
          },
        },
        500: {
          description: 'Internal server error',
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  success: { type: 'boolean' },
                  message: { type: 'string' },
                  code: { type: 'number' },
                },
                required: ['success', 'message', 'code'],
              },
            },
          },
        },
      },
    },
  }
);
