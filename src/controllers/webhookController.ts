import { LineEvent, LineWebhookBody } from '../types';
import {
  handleExchangeRate,
  handleRestaurantSearch,
  handleWeatherForecast,
  handleAIQuery,
  handleImageAnalysis,
} from '../handlers';
import { AGENDA } from '../constants';
import { formatAgenda } from '../utils/response';
import { createAgendaFlexMessage } from '../utils/flex-message';
import {
  createQuickReplyDateMessage,
  createQuickReplyMessage,
} from '../utils/quick-reply';

export const webhookController = async (
  events: LineEvent[],
  userId: string,
  lineClient: any,
  loading: (userId: string) => Promise<any>
) => {
  for (const event of events) {
    await loading(userId);
    if (event.type === 'message') {
      if (event.message?.type === 'text') {
        const text = event.message?.text?.toLowerCase() ?? '';

        if (text.match(/(ÂÜÜ|¬•|jpy|‡πÄ‡∏¢‡∏ô)/i)) {
          await handleExchangeRate(event);
        } else if (
          text.includes('‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£') ||
          text.includes('restaurant') ||
          text.includes('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô')
        ) {
          await handleRestaurantSearch(event);
          await lineClient.replyMessage(event.replyToken, {
            type: 'text',
            text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á',
          });
        } else if (text.includes('agenda') || text.includes('‡πÅ‡∏û‡∏•‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')) {
          const tripAgenda = AGENDA['Tokyo Trip 2025'];
          await lineClient.replyMessage(event.replyToken, [
            {
              type: 'text',
              text: formatAgenda(tripAgenda),
            },
            createQuickReplyDateMessage(),
          ]);
        } else if (text.includes('‡πÅ‡∏û‡∏•‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà') || text.includes('‡πÅ‡∏û‡∏•‡∏ô‡∏ß‡∏±‡∏ô')) {
          const tripAgenda = AGENDA['Tokyo Trip 2025'];

          // Extract date from message (e.g., "‡πÅ‡∏û‡∏•‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15" or "‡πÅ‡∏û‡∏•‡∏ô‡∏ß‡∏±‡∏ô 15/01")
          const dateMatch = text.match(/(\d{1,2})(?:\/\d{1,2})?/);

          if (dateMatch) {
            const dayNumber = dateMatch[1];
            const targetDate = `${dayNumber}/01/2025`;

            // Find the specific day's agenda
            const dayAgenda = tripAgenda.find(day =>
              day.date.startsWith(dayNumber.padStart(2, '0'))
            );

            if (dayAgenda) {
              await lineClient.replyMessage(
                event.replyToken,
                createAgendaFlexMessage([dayAgenda]) // Pass as single-day array
              );
            } else {
              await lineClient.replyMessage(event.replyToken, {
                type: 'text',
                text: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${targetDate} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`,
              });
            }
          } else {
            await lineClient.replyMessage(event.replyToken, {
              type: 'text',
              text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô "‡πÅ‡∏û‡∏•‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏û‡∏•‡∏ô‡∏ß‡∏±‡∏ô 15/01"',
            });
          }
        } else if (
          text.includes('weather') ||
          text.includes('forecast') ||
          text.includes('‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå') ||
          text.includes('‡∏≠‡∏≤‡∏Å‡∏≤‡∏®')
        ) {
          await handleWeatherForecast(event);
        } else if (text.includes('‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠') || text.includes('help')) {
          await lineClient.replyMessage(event.replyToken, {
            type: 'text',
            text:
              `üì± ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n\n` +
              `‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡πç‡∏≤‡∏™‡∏±‡πà‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n\n` +
              `1Ô∏è‚É£ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏¢‡∏ô\n` +
              `   - ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ ÂÜÜ ‡∏´‡∏£‡∏∑‡∏≠ JPY\n\n` +
              `2Ô∏è‚É£ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á\n` +
              `   - ‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n` +
              `3Ô∏è‚É£ ‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô\n` +
              `   - ‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢\n\n` +
              `4Ô∏è‚É£ ‡πÉ‡∏ä‡πâ Gemini AI\n` +
              `   - ‡∏û‡∏¥‡∏°‡∏û‡πå gemini ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°`,
          });
        } else {
          await handleAIQuery(event);
        }
      } else if (event.message?.type === 'image') {
        await handleImageAnalysis(event);
      } else if (event.message?.type === 'location') {
        await handleRestaurantSearch(event);
      } else if (
        event.type === 'message' &&
        event.message?.type === 'sticker'
      ) {
        await lineClient.replyMessage(event.replyToken, {
          type: 'text',
          text: `‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå: ${event.message.stickerId}`,
        });
      }
    } else if (event.type === 'follow') {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Japan Travel Assistant\n\n‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n1. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏¢‡∏ô (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ ÂÜÜ ‡∏´‡∏£‡∏∑‡∏≠ JPY)\n2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏•‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)\n3. ‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô (‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)\n4. ‡πÉ‡∏ä‡πâ Gemini AI (‡∏û‡∏¥‡∏°‡∏û‡πå gemini ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°)',
      });
    } else if (event.type === 'unfollow') {
      console.log('Unfollow event detected');
    } else if (event.type === 'postback') {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: `Postback Data: ${event.postback.data}`,
      });
    } else if (event.type === 'join') {
      await lineClient.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°',
      });
    } else if (event.type === 'leave') {
      console.log('Bot was removed from a group');
    } else {
      console.log(`Unknown event type: ${event.type}`);
    }
  }
};
